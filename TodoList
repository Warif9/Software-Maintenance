import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.util.HashMap;
import java.util.Map;

public class TodoList extends JFrame implements ActionListener {
    private JTextField taskField;
    private JList<TaskItem> taskList;
    private JButton addButton;
    private JButton editButton;
    private JButton deleteButton;
    private JButton clearButton;
    private DefaultListModel<TaskItem> listModel;
    private int selectedIndex;
    private JComboBox<String> categoryComboBox;
    private Map<String, DefaultListModel<TaskItem>> categoryTasks;
    private JButton colorButton;
    private Color backgroundColor;
    private JPanel panel;

    public TodoList() {
        initComponents();
        categoryTasks = new HashMap<>();
    }

    private void initComponents() {
        setTitle("Todo List");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        taskField = new JTextField(20);
        addButton = new JButton("Add Task");
        addButton.addActionListener(this);

        editButton = new JButton("Edit Task");
        editButton.addActionListener(this);
        editButton.setEnabled(false);

        deleteButton = new JButton("Delete Task");
        deleteButton.addActionListener(this);
        deleteButton.setEnabled(false);

        clearButton = new JButton("Clear");
        clearButton.addActionListener(this);

        listModel = new DefaultListModel<>();
        taskList = new JList<>(listModel);
        taskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        taskList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                selectedIndex = taskList.getSelectedIndex();
                editButton.setEnabled(selectedIndex != -1);
                deleteButton.setEnabled(selectedIndex != -1);
            }
        });
        taskList.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int index = taskList.locationToIndex(evt.getPoint());
                TaskItem item = listModel.get(index);
                item.setCompleted(!item.isCompleted());
                taskList.repaint(taskList.getCellBounds(index, index));
            }
        });

        JScrollPane scrollPane = new JScrollPane(taskList);

        String[] categories = {"Personal", "Work", "Shopping", "Others"};
        categoryComboBox = new JComboBox<>(categories);
        categoryComboBox.addActionListener(this);

        colorButton = new JButton("Choose Color");
        colorButton.addActionListener(this);

        panel = new JPanel();
        GroupLayout layout = new GroupLayout(panel);
        panel.setLayout(layout);
        layout.setAutoCreateContainerGaps(true);
        layout.setAutoCreateGaps(true);

        layout.setHorizontalGroup(layout.createParallelGroup()
                .addGroup(layout.createSequentialGroup()
                        .addComponent(taskField)
                        .addComponent(addButton)
                )
                .addComponent(scrollPane)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(editButton)
                        .addComponent(deleteButton)
                        .addComponent(clearButton)
                )
                .addGroup(layout.createSequentialGroup()
                        .addComponent(categoryComboBox)
                        .addComponent(colorButton)
                )
        );

        layout.setVerticalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(taskField)
                        .addComponent(addButton)
                )
                .addComponent(scrollPane)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(editButton)
                        .addComponent(deleteButton)
                        .addComponent(clearButton)
                )
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(categoryComboBox)
                        .addComponent(colorButton)
                )
        );

        getContentPane().add(panel);

        backgroundColor = Color.WHITE;
        panel.setBackground(backgroundColor);

        pack();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == addButton) {
            String task = taskField.getText();
            String category = categoryComboBox.getSelectedItem().toString();

            if (!task.isEmpty()) {
                TaskItem taskItem = new TaskItem(task, false, category);

                DefaultListModel<TaskItem> categoryModel = categoryTasks.getOrDefault(category, new DefaultListModel<>());
                categoryModel.addElement(taskItem);
                categoryTasks.put(category, categoryModel);
                listModel.addElement(taskItem); // Add the task to the main list model
                taskField.setText("");
            }
        } else if (e.getSource() == editButton) {
            String editedTask = taskField.getText();

            if (!editedTask.isEmpty() && selectedIndex != -1) {
                String category = categoryComboBox.getSelectedItem().toString();
                DefaultListModel<TaskItem> categoryModel = categoryTasks.get(category);
                TaskItem taskItem = categoryModel.get(selectedIndex);
                taskItem.setTask(editedTask);
                categoryModel.set(selectedIndex, taskItem);
                taskField.setText("");
                selectedIndex = -1;
                editButton.setEnabled(false);
                deleteButton.setEnabled(false);
            }
        } else if (e.getSource() == deleteButton) {
            int selectedIndex = taskList.getSelectedIndex();

            if (selectedIndex != -1) {
               
                TaskItem selectedTask = listModel.get(selectedIndex);
                String category = selectedTask.getCategory();
                DefaultListModel<TaskItem> categoryModel = categoryTasks.get(category);
                categoryModel.removeElement(selectedTask);
                listModel.removeElement(selectedTask);
                taskField.setText("");
                selectedIndex = -1;
                editButton.setEnabled(false);
                deleteButton.setEnabled(false);
            }
        } else if (e.getSource() == clearButton) {
            listModel.clear();
            categoryTasks.clear();
            taskField.setText("");
            selectedIndex = -1;
            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
        } else if (e.getSource() == categoryComboBox) {
            String selectedCategory = categoryComboBox.getSelectedItem().toString();
            DefaultListModel<TaskItem> categoryModel = categoryTasks.get(selectedCategory);
            if (categoryModel != null) {
                listModel.clear();
                for (int i = 0; i < categoryModel.size(); i++) {
                    TaskItem taskItem = categoryModel.getElementAt(i);
                    listModel.addElement(taskItem);
                }
            } else {
                listModel.clear();
            }
        } else if (e.getSource() == colorButton) {
            Color selectedColor = JColorChooser.showDialog(this, "Choose Color", backgroundColor);
            if (selectedColor != null) {
                backgroundColor = selectedColor;
                panel.setBackground(backgroundColor);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            TodoList todoList = new TodoList();
            todoList.setVisible(true);
        });
    }
}

class TaskItem {
    private String task;
    private boolean completed;
    private String category;

    public TaskItem(String task, boolean completed, String category) {
        this.task = task;
        this.completed = completed;
        this.category = category;
    }

    public String getTask() {
        return task;
    }

    public void setTask(String task) {
        this.task = task;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void setCompleted(boolean completed) {
        this.completed = completed;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    @Override
    public String toString() {
        return completed ? "[x] " + task : "[ ] " + task;
    }
}
